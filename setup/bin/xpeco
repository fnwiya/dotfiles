#!/usr/bin/ruby
# -*- coding: utf-8 -*-
# pecoのdumb端末対応化
## カスタマイズ定数
# pecoバイナリ
PECO = File.expand_path "~/gocode/bin/peco"
# 端末エミュレータ
XTERM = "urxvt"                 # or mlterm/xterm etc
# 端末エミュレータを使うTERM環境変数
TERMS_USE_XTERM = %w[dumb linux]

require 'tempfile'
require 'shellwords'
require 'optparse'

# 新しいコマンドライン
def peco_cmdline
  if input_file
    "#{PECO} #{ARGV.shelljoin}"
  else
    "#{PECO} #{ARGV.shelljoin} < #{new_input_file}"
  end
end

# xterm上でpecoを起動させる
def xterm_peco(xterm)
  out = Tempfile.new "peco-out"
  err = Tempfile.new "peco-err"
  system "#{xterm} -e sh -c '#{peco_cmdline} > #{out.path} 2> #{err.path}'"
  print out.read
  $stderr.print err.read
end

def input_file(argv=ARGV)
  argv = argv.clone
  until argv.empty?
    case argv.first
    when '-h', '--help', '--version', '--null'
      argv.shift
    when /^-/
      argv.shift
      argv.shift
    else
      return argv.first
    end
  end
  nil
end

# 入力をfifoに変換する
def new_input_file
  fifo = "/tmp/peco#$$.fifo"
  system "mkfifo", fifo
  at_exit { File.unlink fifo }
  Thread.start do
    open(fifo, "w") do |fifo|
      fifo.print while $stdin.gets
    end
  end
  fifo
end

conf = {:xterm => XTERM}
ARGV.each_with_index do |x, i|
  case x
  when "--xterm"
    conf[:xterm] = ARGV[i+1]
    ARGV[i..i+1] = nil
  when /^--xterm=(.+)$/
    conf[:xterm] = $1
    ARGV[i] = nil
  end
end
ARGV.compact!

if TERMS_USE_XTERM.include? ENV['TERM']
  xterm_peco conf[:xterm]
else
  exec PECO, *ARGV
end